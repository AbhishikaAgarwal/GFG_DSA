** Maximum number of nodes at a level 'L' of a binary tree is (2^(L-1)).  	(Assuming Level starts from 1)
** Maximum number of nodes in a binary tree of height 'h' is (2^h - 1).	(Height of tree of a single node is considered as 1)
** In a Binary Tree with N nodes, the minimum possible height or the minimum number of levels is Log2(N+1). 	(2 is the base)
** A Binary Tree with L leaves has at least (Log2L + 1) levels. 	( 2 is the base)
** In a Binary tree where every node has 0 or 2 children, number of leaf nodes is always one more than nodes with two children(Terminal nodes).

			TYPES OF BINARY TREES

1) Full Binary Tree :- A Binary Tree is full if every node has either 0 or 2 children. 
2) Complete Binary Tree :- A Binary Tree is complete Binary Tree if all levels are completely filled except possibly the last level 
		        and the last level has all keys filled from left to right(no node should be left in between)
3)Perfect Binary Tree :- A Binary tree is Perfect Binary Tree in which all internal nodes have two children and all leaves are at the same level.



			TRAVERSAL IN BINARY TREE

1) Inorder Traversal :- 
	call Inorder(left -> subtree)
	Visit the root
	call Inorder(right -> subtree)

2) Preorder Traversal :-
	Visit the root
	call Preorder(left -> subtree)
	call Preorder(right -> subtree)

3) Postorder Traversal :-
	call Postorder(left -> subtree)
	call Postorder(right -> subtree)
	Visit the root


CODE :-


#include <iostream>

using namespace std;



/* A binary tree node has data, pointer to left child
   and a pointer to right child */


struct Node
{
    
int data;
    
struct Node* left, *right;
    
Node(int data)
    {
        
	this->data = data;
        
	left = right = NULL;
    
	}

};



// Function to print the postorder traversal of a Binary Tree


void printPostorder(struct Node* node)
{
    
if (node == NULL)
        
return;

    
printPostorder(node->left);

    
printPostorder(node->right);

  
cout << node->data << " ";

}



// Function to print the Inorder traversal
 of a Binary Tree


void printInorder(struct Node* node)
{
   
if (node == NULL)
        
return;

   
printInorder(node->left);

    
cout << node->data << " ";

  
printInorder(node->right);

}



// Function to print the PreOrder traversal 
of a Binary Tree


void printPreorder(struct Node* node)
{
   
if (node == NULL)
        
return;

   
cout << node->data << " ";

 
printPreorder(node->left); 

  
printPreorder(node->right);

} 



int main()
{
   

 // Contrust the Tree
    
//      1
    
//     /  \
    
//    2    3
   
//   / \    
    
//  4   5
    

    
struct Node *root = new Node(1);
    
root->left    = new Node(2);
    
root->right    = new Node(3);
    
root->left->left = new Node(4);
    
root->left->right = new Node(5); 

    
cout << "Preorder traversal of binary tree is \n";
    
printPreorder(root);

    
cout << "\nInorder traversal of binary tree is \n";
    
printInorder(root); 

    
cout << "\nPostorder traversal of binary tree is \n";
    
printPostorder(root);

   
return 0;

}



		LEVEL ORDER TRAVERSAL

In the Level Order Traversal, the binary tree is traversed level-wise starting from the first to last level sequentially.

Algorithm: 
The Level Order Traversal can be implemented efficiently using a Queue.

1) Create an empty queue q.
2) Push the root node of tree to q. That is, q.push(root).
3) Loop while the queue is not empty:
4) Pop the top node from queue and print the node.
5) Enqueue node's children (first left then right children) to q
6) Repeat the process until queue is not empty.


CODE :-

#include <iostream> 

#include <queue> 

using namespace std; 

struct Node 
{ 
    
int data; 
    
struct Node *left, *right; 

}; 



// Utility function to create a new tree node 


Node* newNode(int data) 
{ 
    
Node *temp = new Node; 
    
temp->data = data; 
    
temp->left = temp->right = NULL; 
   
return temp; 

} 


// Function to print Level Order Traversal of the Binary Tree


void printLevelOrder(Node *root) 
{
 
    
// Base Case 
    

if (root == NULL) 
return; 

   
queue<Node *> q; 

 		 // Created an empty queue for level order tarversal 
 

// Enqueue Root and initialize height 
    

q.push(root); 

  
  
while (q.empty() == false) { 

        
// Print front of queue and remove it from queue 
  
      
Node *node = q.front();
 
        
cout << node->data << " "; 
  
      
q.pop(); 

 
       
/* Enqueue left child */
  
      
if (node->left != NULL) 
           
q.push(node->left); 

  
     
 /* Enqueue right child */
 
       
if (node->right != NULL) 
            
q.push(node->right); 
    
} 

}
 

int main() 
{ 
   
// Create the following Binary Tree
   
//      1
    
//     / \
    
//    2   3
   
//   / \
    
//  4   5
    
    

Node *root = newNode(1); 
    
root->left = newNode(2); 
    
root->right = newNode(3); 
    
root->left->left = newNode(4); 
    
root->left->right = newNode(5); 

    
cout << "Level Order traversal of binary tree is \n"; 
    
printLevelOrder(root); 
    
    
return 0; 

} 



			INSERTION IN BINARY TREE

The idea is to do iterative level order traversal of the given tree using a queue. 
If we find a node whose left child is empty, we make new key as the left child of the node. 
Else if we find a node whose right child is empty, we make new key as the right child of that node. 
We keep traversing the tree until we find a node whose either left or right child is empty.


#include <iostream> 

#include <queue> 

using namespace std; 


struct Node { 
   
 int key; 
    
struct Node* left, *right; 

}; 



// Utility function to create a new Node


struct Node* newNode(int key) 

{ 
    
struct Node* temp = new Node; 
    
temp->key = key; 
    
temp->left = temp->right = NULL; 
   
return temp; 

}; 



// Function to print InOrder traversal of a Binary Tree


void inorder(struct Node* temp) 
{ 
    
if (!temp) 
    			// Or if(temp == NULL) return    
return; 

    
inorder(temp->left); 
    
cout << temp->key << " "; 
    
inorder(temp->right); 

} 



// Function to insert a new element in a Binary Tree


void insert(struct Node* temp, int key) 
{ 
    
queue<struct Node*> q; 
    
q.push(temp); 

    

// Do level order traversal until we find an empty place. 
  
  
while (!q.empty()) { 
   		// Or while(q.empty()==false){     
struct Node* temp = q.front(); 
        
q.pop(); 

        
if (!temp->left) { 
      			// Or if(temp -> left == NULL){      
temp->left = newNode(key); 
           
break; 
        
} 
else
            
q.push(temp->left); 

        
if (!temp->right) { 
     		// Or if(temp -> right == NULL){          
temp->right = newNode(key); 
            
break; 
        
} 
else
            
q.push(temp->right); 
    
} 

} 

int main() 
{   
   
// Create the following Binary Tree
    
//          10
    
//         /   \
   
//        11   9
    
//       /        \
    
//      7         8
    
struct Node* root = newNode(10); 
    
root->left = newNode(11); 
    
root->left->left = newNode(7); 
    
root->right = newNode(9); 
    
root->right->left = newNode(15); 
    
root->right->right = newNode(8); 

    
cout << "Inorder traversal before insertion:"; 
    
inorder(root); 

    
int key = 12; 
    
insert(root, key); 

    
cout << endl; 
    
cout << "Inorder traversal after insertion:"; 
   
inorder(root); 

    
return 0; 

} 



		DELETION IN A BINARY TREE

While performing the delete operation on binary trees, there arise a few cases:
1) The node to be deleted is a leaf node. That is it does not have any children.
2) The node to be deleted is a internal node. That is it have left or right child.
3) The node to be deleted is the root node.

In the first case 1, since the node to be deleted is a leaf node, we can simply delete the node without any overheads. 
But in the next 2 cases, we will have to take care of the children of the node to be deleted.

In order to handle all of the cases, one way to delete a node is to:
Starting at the root, find the deepest and rightmost node in binary tree and node which we want to delete.
Replace the deepest rightmost node’s data with the node to be deleted.
Then delete the deepest rightmost node.



#include <bits/stdc++.h> 

using namespace std; 



struct Node 
{ 
    
int key; 
    
struct Node* left, *right; 

}; 



// Utility function to create a new
 Binary Tree Node


struct Node* newNode(int key) 
{ 
    
struct Node* temp = new Node; 
    
temp->key = key; 
    
temp->left = temp->right = NULL; 
    
return temp; 

}; 



// Function to perform Inorder Traversal 

void inorder(struct Node* temp) 
{ 
    
if (!temp) 
        
return; 
    
inorder(temp->left); 
    
cout << temp->key << " "; 
    
inorder(temp->right); 
} 



// Function to delete the given deepest node 
(d_node) in binary tree 


void deletDeepest(struct Node *root, struct Node *d_node) 
{ 
    
queue<struct Node*> q; 
    
q.push(root); 

    
// Do level order traversal until last node 
    
struct Node* temp; 
    
while(!q.empty()) 
    { 
        
temp = q.front(); 
        
q.pop(); 

        
if (temp->right) 
        { 
            
if (temp->right == d_node) 
            { 
                
temp->right = NULL; 
                
delete(d_node); 
               
return; 
           
} 
            
else
                
q.push(temp->right); 
       
} 

        
if (temp->left) 
        { 
            
if (temp->left == d_node) 
            { 
                
temp->left=NULL; 
                
delete(d_node); 
                
return; 
            
} 
            
else
                
q.push(temp->left); 
        
} 
    
} 

} 


// Function to delete element in binary tree 


void deletion(struct Node* root, int key) 
{ 
    
queue<struct Node*> q; 
    
q.push(root); 

    
struct Node *temp; 
    
struct Node *key_node = NULL; 

    

// Do level order traversal to find deepest 
    

// node(temp) and node to be deleted (key_node) 
    

while (!q.empty()) 
    { 
        
temp = q.front(); 
        
q.pop(); 

       
if (temp->key == key) 
            
key_node = temp; 

        
if (temp->left) 
            
q.push(temp->left); 

        
if (temp->right) 
            
q.push(temp->right); 
    
} 

    
int x = temp->key; 
    
deletDeepest(root, temp); 
    
key_node->key = x; 

}


int main() 
{   
    
// Create the following Binary Tree
    
//            10
    
//           /     \
    
//        11       9
   
 //       /  \     / \
    
//      7    12  15  8  
    
struct Node* root = newNode(10); 
   
root->left = newNode(11); 
    
root->left->left = newNode(7); 
    
root->left->right = newNode(12); 
    
root->right = newNode(9); 
    
root->right->left = newNode(15); 
    
root->right->right = newNode(8); 

    
cout << "Inorder traversal before deletion : "; 
    
inorder(root); 

    int key = 11; 
    deletion(root, key); 

    
cout << endl; 
    
cout << "Inorder traversal after deletion : "; 
    
inorder(root); 

    
return 0; 

} 


		FINDING THE LEAST COMMON ANCESTOR ( LCA )

The LCA or Lowest Common Ancestor of any two nodes N1 and N2 is defined as the common ancestor of both the nodes 
which is closest to them. 
That is the distance of the common ancestor from the nodes N1 and N2 should be least possible.

	1
                /  \
              2	   3
             / \   / \
            4  5 6  7

Method 1: The simplest method of finding LCA of two nodes in a Binary Tree is to observe that the LCA of the given nodes 
will be the last common node in the paths from the root node to the given nodes.

For Example: consider the above-given tree and nodes 4 and 5.
Path from root to node 4: [1, 2, 4]
Path from root to node 5: [1, 2, 5].
The last common node is 2 which will be the LCA.

Algorithm:
Find the path from the root node to node n1 and store it in a vector or array.
Find the path from the root node to node n2 and store it in another vector or array.
Traverse both paths untill the values in arrays are same. Return the common element just before the mismatch.


CODE :-


#include <iostream>

#include <vector>


using namespace std;



// A Binary Tree node


struct Node {
    
int key;
    
struct Node *left, *right;

};



// Utility function creates a new binary tree
 node with given key


Node* newNode(int k)
{
    
Node* temp = new Node;
    
temp->key = k;
    
temp->left = temp->right = NULL;
    
return temp;

}



// Function to find the path from root node to
 given root of the tree, Stores the path in a
 vector path[], returns true if path exists
 otherwise false


bool findPath(Node* root, vector<int>& path, int k)
{
    
// base case
    
if (root == NULL)
        
return false;

    

// Store this node in path vector.
 The node will be removed if
  not in path from root to k
    
path.push_back(root->key);

    

// See if the k is same as root's key
    
if (root->key == k)
        
return true;

    

// Check if k is found in left or right sub-tree
    
if ((root->left && findPath(root->left, path, k)) || 
(root->right && findPath(root->right, path, k)))
       
return true;

    

// If not present in subtree rooted with root,
 remove root from path[] and return false
    
path.pop_back();

    
return false;

}



// Function to return LCA if node n1, n2 are present in the given binary tree, otherwise
 return -1

int findLCA(Node* root, int n1, int n2)
{
 
   
// to store paths to n1 and n2 from the root
   
vector<int> path1, path2;

    

// Find paths from root to n1 and root to n1.
 If either n1 or n2 is not present, return -1
   
if (!findPath(root, path1, n1) || !findPath(root, path2, n2))
        
return -1;

    

// Compare the paths to get the first
 different value
    
int i;

    
for (i = 0; i < path1.size() && i < path2.size(); i++)
        
if (path1[i] != path2[i])
            
break;

    
return path1[i - 1];

}



int main()
{
    

// Let us create the Binary Tree
 as shown in the above diagram
    

Node* root = newNode(1);
    
root->left = newNode(2);
    
root->right = newNode(3);
    
root->left->left = newNode(4);
    
root->left->right = newNode(5);
    
root->right->left = newNode(6);
    
root->right->right = newNode(7);

    
cout << "LCA(4, 5) = " << findLCA(root, 4, 5);
    
cout << "\nLCA(4, 6) = " << findLCA(root, 4, 6);
    
cout << "\nLCA(3, 4) = " << findLCA(root, 3, 4);
    
cout << "\nLCA(2, 4) = " << findLCA(root, 2, 4);

    
return 0;

}



Method 2: 
The method 1 finds LCA in O(N) time but requires three tree traversals plus extra spaces for path arrays. 
If we assume that the keys are present in Binary Tree, we can find LCA using single traversal of Binary Tree and without extra storage 
for path arrays.

The idea is to traverse the tree starting from the root node. 
If any of the given keys (n1 and n2) matches with root, then root is LCA (assuming that both keys are present). 
If root doesn't match with any of the keys, we recur for left and right subtrees. 
The node which has one key present in its left subtree and the other key present in the right subtree is the LCA. 
If both keys lie in left subtree, then left subtree has LCA also, otherwise, LCA lies in the right subtree.


CODE:-


// C++ Program to find LCA of n1 and n2 using
 one traversal of Binary Tree



#include <iostream>


using namespace std;



// A Binary Tree Node

struct Node {
    
struct Node *left, *right;
    
int key;

};



// Utility function to create a new tree Node


Node* newNode(int key)
{
    
Node* temp = new Node;
    
temp->key = key;
    
temp->left = temp->right = NULL;
    
return temp;

}



// This function returns pointer to LCA of two given
 values n1 and n2. 
//This function assumes that
 n1 and n2 are present in Binary Tree


struct Node* findLCA(struct Node* root, int n1, int n2)
{
    

// Base case
    
if (root == NULL)
        
return NULL;

    

// If either n1 or n2 matches with root's key, report
 the presence by returning root 
//(Note that if a key is
 ancestor of other, then the ancestor key becomes LCA
    

if (root->key == n1 || root->key == n2)
       
return root;

    

// Look for keys in left and right subtrees
    
Node* left_lca = findLCA(root->left, n1, n2);
    
Node* right_lca = findLCA(root->right, n1, n2);

    

// If both of the above calls return Non-NULL,
 then one key is present in once subtree and
 other is present in other,
 So this node is the LCA
    
if (left_lca && right_lca)
        
return root;

    

// Otherwise check if left subtree or
 right subtree is LCA
    

return (left_lca != NULL) ? left_lca : right_lca;

}


int main()
{
    

Let us create binary tree given in the above example
    

Node* root = newNode(1);
    
root->left = newNode(2);
    
root->right = newNode(3);
    
root->left->left = newNode(4);
    
root->left->right = newNode(5);
    
root->right->left = newNode(6);
    
root->right->right = newNode(7);

    
cout << "LCA(4, 5) = " << findLCA(root, 4, 5)->key;
    
cout << "nLCA(4, 6) = " << findLCA(root, 4, 6)->key;
    
cout << "nLCA(3, 4) = " << findLCA(root, 3, 4)->key;
    
cout << "nLCA(2, 4) = " << findLCA(root, 2, 4)->key;

    
return 0;

}


		DIAMETER OF A BINARY TREE

The diameter of a tree (sometimes called the width) is the number of nodes on the longest path between two end nodes.
 
The diameter of a tree T is the largest of the following quantities:
The diameter of T's left subtree.
The diameter of T's right subtree.
The longest path between leaves that goes through the root of T (this can be computed from the heights of the subtrees of T).

The longest path between leaves that goes through a particular node say, nd can be calculated as:
1 + height of left subtree of nd + height of right subtree of nd

Therefore, final Diameter of a node can be calculated as:
Diameter = maximum(lDiameter, rDiameter, 1 + lHeight + rHeight)
Where,
lDiameter = Diameter of left subtree
rDiameter = Diameter of right subtree
lHeight = Height of left subtree
rHeight = Height of right subtree


CODE :- 




#include <bits/stdc++.h>

using namespace std;



// Binary Tree Node


struct node
{
    
int data;
    
struct node* left, *right;

};



// Function to create a new node of tree and returns pointer 


struct node* newNode(int data);



// Function to Compute height of a tree


int height(struct node* node);



// Function to get diameter of a binary tree 


int diameter(struct node * tree)
{
    

/* base case where tree is empty */
   
if (tree == NULL)
        
return 0;
    
    

/* get the height of left and right sub-trees */
    

int lheight = height(tree->left);
    
int rheight = height(tree->right);
    
   

 /* get the diameter of left and right sub-trees */
    

int ldiameter = diameter(tree->left);
    
int rdiameter = diameter(tree->right);
    
    

/* Return max of following three
    1) Diameter of left subtree
    2) Diameter of right subtree
    3) Height of left subtree + height of right subtree + 1 */
    

return max(lheight + rheight + 1, max(ldiameter, rdiameter));

} 



/* UTILITY FUNCTIONS TO TEST diameter() FUNCTION */



/* The function Compute the "height" of a tree. 
Height is the number of nodes along the longest path from the root node down to the farthest leaf node.*/


int height(struct node* node)
{
    

/* base case tree is empty */
    
if(node == NULL)
        
return 0;
    
    

/* If tree is not empty then height = 1 + max of left height and right heights */
    

return 1 + max(height(node->left), height(node->right));

} 


/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */


struct node* newNode(int data)
{
    
struct node* node = (struct node*)
                        
malloc(sizeof(struct node));
    
node->data = data;
    
node->left = NULL;
    
node->right = NULL;
    
    
return(node);

}


int main()
{

    
/* Constructed binary tree is
             1

            / \
 
          2   3

          / \
 
        4   5
    
*/
    

struct node *root = newNode(1);
    
root->left     = newNode(2);
    
root->right     = newNode(3);
    
root->left->left = newNode(4);
    
root->left->right = newNode(5);
    
    
cout<<"Diameter of the given binary tree is "<<diameter(root);

    
return 0;

}



		          LEFT, RIGHT, TOP AND BOTTOM VIEW OF A BINARY TREE

              1

            /   \ 
 
          2     3

        /  \
    /  \
      4    5
 6   7    

Left view :- 1, 2, 4
Right view :- 1, 3, 7
Top view :- 4, 2, 1, 3, 7
Bottom view :- 4, 5, 6, 7


The left view of the binary tree will contain only those nodes which can be seen when the Binary tree is viewed from left.
 A simple solution is to notice that the nodes appearing in the left view of the binary tree are the first nodes at every level. 
So, the idea is to do a level order traversal of the binary tree using a marker to identify levels and print the first node at every level.

CODE :-


void leftViewUtil(Node root) 
{

// Declare a queue for Level order Traversal
      
queue<Node*> q;
  
    
if (root == NULL) 
        
return; 

    

// Push root 
    
q.push(root); 

    

// Delimiter (marker that level is finished)
q.push(NULL); 

    

while (!q.empty()) { 
        
Node* temp = q.front(); 


        
if (temp) { 

            

// Prints first node 
of each level 
            
print temp->data;

            

// Push children of all nodes at current level 
            
while (q.front() != NULL) {
 

                
// If left child is present push into queue 
                
if (temp->left) 
                    
q.push(temp->left); 


               
// If right child is present push into queue 
                
if (temp->right) 
                    
q.push(temp->right); 

                

// Pop the current node 
                
q.pop(); 

                
temp = q.front(); 
            
} 

           
// Push delimiter 
for the next level 
            
q.push(NULL); 
        
} 

        

// Pop the delimiter of the previous level 
        
q.pop(); 
    
} 

} 



Right View: Printing Right View of the Binary Tree is similar to the above approach of printing the Left view of the tree. 
The idea is to print the last node present at every level. 
So, perform a level order traversal using a delimeter to identify levels and print the last node present at every level.



				TOP VIEW

Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. 
A node x is there in output if x is the topmost node at its horizontal distance. 
Horizontal distance of left child of a node x is equal to the horizontal distance of x minus 1, 
and that of right child is the horizontal distance of x plus 1.

So, the idea is to do a level order traversal of the tree and calculate the horizontal distance of every node from the root node 
and print those nodes which are the first nodes of a particular horizontal distance.

Hashing can be used to keep a check on whether any node with a particular horizontal distance is encountered yet or not.


CODE :-


// Structure of binary tree. Binary Tree node is modified to contain
 an extra parameter hd, 
//which is the 
horizontal distance of the node from root node.


struct Node 
{ 
    
Node * left; 
    
Node* right; 
    
int hd; 
    
int data; 

}; 



// Function to print the topView of the binary tree 


void topview(Node* root) 
{ 
    
if(root==NULL) 
        
return; 
    
    
queue<Node*>q; 
    
    
map<int,int> m; 
    
    
int hd=0; 
    
    
root->hd = hd; 
    
    

// push node and horizontal distance to queue 
    
q.push(root); 
    
    
print "The top view of the tree is : "; 
    
    
while(q.size()) 
    { 
        
hd = root->hd; 
        
        

// Check if any node with this horizontal distance
 is encontered yet or not.
        
// If not insert, current node's data to Map
        
if(m.count(hd)==0) 
            
m[hd]=root->data; 
        
        

// Push the left child with its horizontal distance to queue
        
if(root->left) 
        { 
            
root->left->hd=hd-1; 
            
q.push(root->left); 
        
} 
        
        

// Push the right child with its horizontal distance to queue        
        
if(root->right) 
        { 
            
root->right->hd=hd+1; 
            
q.push(root->right); 
        
} 
        
        
q.pop(); 
        
root=q.front(); 
    
} 
    
    

// Print the map as it stores the nodes appearing in the Top View
    
for(auto i=m.begin();i!=m.end();i++) 
    { 
        
cout<<i->second<<" "; 
    
}     

} 


Bottom View: The Bottom View of a binary tree can be printed using the similar approach as that of printing the Top View. 
A node x is there in output if x is the bottom most instead of the top most node at its horizontal distance.

The process of printing the bottom view is almost the same as that of top view with a little modification.
While storing the node's data along with a particular horizontal distance in the map, 
keep updating the node's data in the map for a particular horizontal distance 
so that the map contains the last node appearing with a particular horizontal distance instead of first.


		CONVERT BINARY TREE TO ITS MIRROR TREE

 Mirror of a Binary Tree T is another Binary Tree M(T) with left and right children of all non-leaf nodes interchanged.

Solution - The idea is to recursively call for left and right subtrees of a given node. 
On each recursive call swap the pointers of the children nodes.


Pseudo Code

// function to convert binary tree to it's mirror
void mirror(struct Node* node) 
{
    if (node == NULL) 
        return
    else
    {
        struct Node* temp
         
        /* Recur for subtrees */
        mirror(node->left)
        mirror(node->right)
     
        /* swap the pointers in this node */
        temp     = node->left
        node->left = node->right
        node->right = temp
    }
}


		CONVERT A BINARY TREE TO A DOUBLY LINKED LIST

Given a Binary Tree (BT), convert it to a Doubly Linked List(DLL) In-Place. 
The left and right pointers in nodes are to be used as previous and next pointers respectively in converted DLL. 
The order of nodes in DLL must be same as Inorder of the given Binary Tree. 
The first node of Inorder traversal (left most node in BT) must be head node of the DLL.


void BinaryTree2DoubleLinkedList(node *root, node **head)
{
    // Base case
    if (root == NULL) 
        return
 
    // Initialize previously visited node as NULL. This is
    // static so that the same value is accessible in all recursive calls

    static node* prev = NULL
 
    // Recursively convert left subtree
    BinaryTree2DoubleLinkedList(root->left, head)
 
    // Now convert this node
    if (prev == NULL)
        *head = root
    else
    {
        root->left = prev
        prev->right = root
    }
    prev = root
 
    // Finally convert right subtree
    BinaryTree2DoubleLinkedList(root->right, head)
}
